generator client {
  provider = "prisma-client-js"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChannelSubscriptions {
  subscriberId                                     String   @map("subscriber_id") @db.Uuid
  channelId                                        String   @map("channel_id") @db.Uuid
  createdAt                                        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  users_channel_subscriptions_channel_idTousers    Users    @relation("channel_subscriptions_channel_idTousers", fields: [channelId], references: [id], onDelete: NoAction, map: "channel_id_fk")
  users_channel_subscriptions_subscriber_idTousers Users    @relation("channel_subscriptions_subscriber_idTousers", fields: [subscriberId], references: [id], onDelete: NoAction, map: "subscriber_id_fk")

  @@id([subscriberId, channelId], map: "channel_subscriptions_composite_pk")
  @@map("channel_subscriptions")
}

model PlayListNames {
  id         BigInt      @id(map: "play_list_names_id_pk") @default(autoincrement())
  name       String      @db.VarChar
  userId     String      @map("user_id") @db.Uuid
  videoCount BigInt?     @default(0) @map("video_count")
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  users      Users       @relation("play_list_namesTousers", fields: [userId], references: [id], onDelete: NoAction, map: "users_id_fk")
  playLists  PlayLists[]

  @@map("play_list_names")
}

model PlayLists {
  id              String        @id(map: "play_lists_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playListNamesId BigInt        @map("play_list_names_id")
  videoId         String        @map("video_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  playListNames   PlayListNames @relation(fields: [playListNamesId], references: [id], onDelete: Cascade, map: "play_list_names_id_fk")
  videos          Videos        @relation("play_listsTovideos", fields: [videoId], references: [id], onDelete: NoAction, map: "videos_id_fk")

  @@map("play_lists")
}

model SchemaMigrations {
  version String @id @db.VarChar(255)

  @@map("schema_migrations")
}

model WatchHistory {
  videoId        String    @map("video_id") @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  lastWatchtedAt DateTime? @map("last_watchted_at") @db.Time(6)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime? @map("updated_at") @db.Timestamptz(6)
  users          Users     @relation("usersTowatch_history", fields: [userId], references: [id], onDelete: NoAction, map: "users_id_fk")
  videos         Videos    @relation("videosTowatch_history", fields: [videoId], references: [id], onDelete: NoAction, map: "videos_id_fk")

  @@id([videoId, userId], map: "watch_history_cs_pk")
  @@map("watch_history")
}

model Feelings {
  userId    String         @map("user_id") @db.Uuid
  videoId   String         @map("video_id") @db.Uuid
  reaction  reaction_types
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  users     Users          @relation(fields: [userId], references: [id], onDelete: NoAction, map: "users_id_fk")
  videos    Videos         @relation(fields: [videoId], references: [id], onDelete: NoAction, map: "videos_id_fk")

  @@id([userId, videoId], map: "feelings_composite_pk")
  @@map("feelings")
}

model Users {
  id                                                               String                 @id(map: "users_id_pk") @db.Uuid
  email                                                            String                 @unique @db.Citext
  phone                                                            String?                @db.VarChar
  name                                                             String                 @db.VarChar
  channelName                                                      String                 @unique @map("channel_name") @db.VarChar
  description                                                      String?
  subscriberCount                                                  Int?                   @default(0) @map("subscriber_count")
  createdAt                                                        DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                        DateTime?              @map("updated_at") @db.Timestamptz(6)
  channel_subscriptions_channel_subscriptions_channel_idTousers    ChannelSubscriptions[] @relation("channel_subscriptions_channel_idTousers")
  channel_subscriptions_channel_subscriptions_subscriber_idTousers ChannelSubscriptions[] @relation("channel_subscriptions_subscriber_idTousers")
  feelings                                                         Feelings[]
  play_list_names                                                  PlayListNames[]        @relation("play_list_namesTousers")
  videos                                                           Videos[]
  watcHistory                                                      WatchHistory[]         @relation("usersTowatch_history")

  @@map("users")
}

model Videos {
  id            String          @id(map: "videos_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String          @db.VarChar
  description   String?
  category      category_types? @default(UNCATEGORISED)
  viewsCount    Int?            @default(0) @map("views_count")
  likesCount    Int?            @default(0) @map("likes_count")
  dislikesCount Int?            @default(0) @map("dislikes_count")
  thumbnail     String          @unique @db.VarChar
  streamUrl     String          @unique @map("stream_url") @db.VarChar
  channelId     String          @map("channel_id") @db.Uuid
  duration      Float?
  isPrivate     Boolean?        @default(false) @map("is_private")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @map("updated_at") @db.Timestamptz(6)
  users         Users           @relation(fields: [channelId], references: [id], onDelete: NoAction, map: "channels_id_fk")
  feelings      Feelings[]
  playLists     PlayLists[]     @relation("play_listsTovideos")
  watchHistory  WatchHistory[]  @relation("videosTowatch_history")

  @@index([channelId])
  @@map("videos")
}

enum category_types {
  UNCATEGORISED
  GAMING
  EDUCATION
  DOCUMENTARY
  MUSIC
  NEWS
  MOVIES
}

enum reaction_types {
  LIKE
  DISLIKE
}
