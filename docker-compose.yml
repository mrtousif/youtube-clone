version: "3"

volumes:
    postgres_data:
        driver: local

services:
    postgres:
        container_name: postgres
        image: postgres:14-alpine
        restart: unless-stopped
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init/db:/docker-entrypoint-initdb.d/
        command: postgres -c wal_level=logical
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    hasura:
        container_name: hasura
        image: hasura/graphql-engine:v2.18.0
        restart: unless-stopped
        depends_on:
            - postgres
            - keycloak
        ports:
            - "6080:8080"
        volumes:
          - ./hasura/metadata:/hasura-metadata
        environment:
            ## postgres database to store Hasura metadata
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/hasura_metadata
            HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            HASURA_GRAPHQL_LOG_LEVEL: warn
            ## enable the console served by server
            HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
            ## enable debugging mode. It is recommended to disable this in production
            HASURA_GRAPHQL_DEV_MODE: "true"
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_JWT_SECRET: '{ "type": "RS256", "jwk_url": "http://keycloak:8080/realms/development_realm/protocol/openid-connect/certs" }'
            HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
            HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
            HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: 'true'
            NESTJS_BASE_URL: ${NESTJS_BASE_URL}
            NESTJS_EVENT_WEBHOOK_ENDPOINT: ${NESTJS_BASE_URL}/hasura/events
            NESTJS_EVENT_WEBHOOK_SHARED_SECRET: ${NESTJS_EVENT_WEBHOOK_SHARED_SECRET}
            HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 30

    # realtime:
    #     image: supabase/realtime:latest
    #     ports:
    #         - "8000:4000"
    #     environment:
    #         DB_HOST: postgres
    #         DB_NAME: ${POSTGRES_DB}
    #         DB_USER: ${POSTGRES_USER}
    #         DB_PASSWORD: ${POSTGRES_PASSWORD}
    #         DB_PORT: 5432
    #         PORT: 4000
    #         JWT_SECRET: SOMETHING_SUPER_SECRET
    #         SECURE_CHANNELS: 'false'
    #     depends_on:
    #         - postgres

    pgweb:
        container_name: pgweb
        image: sosedoff/pgweb:latest
        restart: unless-stopped
        ports:
            - "8081:8081"
        environment:
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        depends_on:
            - postgres

    keycloak:
        container_name: keycloak
        image: quay.io/keycloak/keycloak:20.0.5
        command: ["start-dev", "--import-realm"]
        environment:
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: password123
            KC_DB: postgres
            KC_DB_URL_DATABASE: keycloak_db
            KC_DB_PASSWORD: password
            KC_DB_SCHEMA: public
            KC_DB_USERNAME: keycloak
            KC_DB_URL_HOST: postgres
            KC_PROXY: "passthrough"
            KK_TO_RMQ_URL: rabbitmq
            KK_TO_RMQ_PORT: 5672
            KK_TO_RMQ_VHOST: DSrabbitmq
            KK_TO_RMQ_EXCHANGE: amq.topic
            KK_TO_RMQ_USERNAME: rabbit
            KK_TO_RMQ_PASSWORD: rabbit
            KK_TO_RMQ_USE_TLS: 'false'
        ports:
            - 8180:8080
        depends_on:
            - postgres
        volumes:
            - ./realm-export.json:/opt/keycloak/data/import/realm.json:ro


    redis:
        image: redis:7-alpine
        hostname: redis
        restart: unless-stopped
        ports:
            - "6379:6379"

    maildev:
        image: maildev/maildev
        ports:
            - "1080:1080"
            - "1025:1025"

    nats:
        image: nats:alpine
        ports:
            - "4222:4222"
            - "8222:8222"
        command: [ "-js", "-m", "8222" ]
        networks:
            - nats


networks:
    nats:
        driver: bridge
    monorepo-network:
        driver: bridge
