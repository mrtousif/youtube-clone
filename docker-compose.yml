version: "3"

volumes:
    postgres_data:
        driver: local
    rabbitmq_data:
    rabbitmq_log:

services:
    postgres:
        image: postgres:14-alpine
        restart: unless-stopped
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init/db:/docker-entrypoint-initdb.d/
        command: postgres -c wal_level=logical
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    hasura:
        container_name: hasura
        image: hasura/graphql-engine:v2.11.0-beta.1
        restart: unless-stopped
        depends_on:
            - postgres
        ports:
            - "6080:8080"
        volumes:
          - ./hasura/metadata:/hasura-metadata
        environment:
            ## postgres database to store Hasura metadata
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/hasura_metadata
            HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            ## enable the console served by server
            HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
            ## enable debugging mode. It is recommended to disable this in production
            HASURA_GRAPHQL_DEV_MODE: "true"
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS384", "key": "${DEV_JWT_SECRET}"}'
            HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
            HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
            HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: 'true'
            NESTJS_BASE_URL: ${NESTJS_BASE_URL}
            NESTJS_EVENT_WEBHOOK_ENDPOINT: ${NESTJS_BASE_URL}/hasura/events
            NESTJS_EVENT_WEBHOOK_SHARED_SECRET: ${NESTJS_EVENT_WEBHOOK_SHARED_SECRET}
            HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 30
            HASURA_GRAPHQL_NO_OF_RETRIES: 10

    # realtime:
    #     image: supabase/realtime:latest
    #     ports:
    #         - "8000:4000"
    #     environment:
    #         DB_HOST: postgres
    #         DB_NAME: ${POSTGRES_DB}
    #         DB_USER: ${POSTGRES_USER}
    #         DB_PASSWORD: ${POSTGRES_PASSWORD}
    #         DB_PORT: 5432
    #         PORT: 4000
    #         JWT_SECRET: SOMETHING_SUPER_SECRET
    #         SECURE_CHANNELS: 'false'
    #     depends_on:
    #         - postgres

    pgweb:
        image: sosedoff/pgweb:latest
        restart: unless-stopped
        ports:
            - "8081:8081"
        environment:
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        depends_on:
            - postgres
    # keycloak:
    #     image: bitnami/keycloak:18.0.2
    #     container_name: keycloak
    #     environment:
    #         DB_VENDOR: POSTGRES
    #         DB_ADDR: postgres
    #         DB_DATABASE: keycloak_db
    #         DB_USER: keycloak
    #         DB_PASSWORD: password
    #         KEYCLOAK_ADMIN: admin
    #         KEYCLOAK_ADMIN_PASSWORD: password123
    #         PROXY_ADDRESS_FORWARDING: "true"
    #     ports:
    #         - 8083:8080
    #     depends_on:
    #         - postgres


    redis:
        image: redis:7-alpine
        hostname: redis
        restart: unless-stopped
        ports:
            - "6379:6379"

    redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: ghcr.io/joeferner/redis-commander:latest
        restart: unless-stopped
        environment:
            - REDIS_HOSTS=local:redis:6379
        ports:
            - "8084:8081"
        depends_on:
            - redis
    maildev:
        image: maildev/maildev
        ports:
            - "1080:1080"
            - "1025:1025"

    rabbitmq:
        image: rabbitmq:3.9-management
        hostname: rabbitmq
        environment:
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq/
            - rabbitmq_log:/var/log/rabbitmq/
        networks:
            - rabbitmq_net

networks:
    rabbitmq_net:
        driver: bridge
    default:
        name: "monorepo-network"
